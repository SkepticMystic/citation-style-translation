/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

// Source: https://stackoverflow.com/questions/4320958/regular-expression-for-recognizing-in-text-citations
const authorReg = "(?:[A-Z][A-Za-z'`-]+)";
const etal = '(?:et al.?)';
const additional = '(?:,? (?:(?:and |& )?' + authorReg + '|' + etal + '))';
const year_num = '(?:19|20)[0-9][0-9]';
const page_num = '(?:, p.? [0-9]+)?';
const year = '(?:, *' + year_num + page_num + '| *(' + year_num + page_num + '))';
const citeRegex = new RegExp('(' + authorReg + additional + '*' + year + ')', 'g');

function copy(content) {
    return __awaiter(this, void 0, void 0, function* () {
        yield navigator.clipboard.writeText(content).then(() => new obsidian.Notice("Copied to clipboard"), () => new obsidian.Notice("Could not copy to clipboard"));
    });
}

class CSTSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        // containerEl.createEl('h2', { text: 'Settings for my awesome plugin.' });
    }
}

const DEFAULT_SETTINGS = {};
class CSTPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.Pandoc2Cites = () => __awaiter(this, void 0, void 0, function* () {
            const content = yield this.getSelectionText();
            console.log({ content });
            const refs = this.getCitationEntries();
            if (!refs) {
                return;
            }
            const pandocCites = content.match(/\[@.+?\]/g);
            console.log({ pandocCites });
            let replacement = content.slice();
            pandocCites.forEach(pCite => {
                const key = pCite.replace(/\[@(.+?)\]/, '$1');
                const ref = refs.find(ref => ref.id === key);
                if (!ref)
                    return;
                console.log({ pCite, key, ref });
                const year = ref.issued['date-parts'][0][0];
                let authorStr;
                if (ref.author.length <= 2) {
                    const authorArr = ref.author.map(author => {
                        if (author.family) {
                            return author.family;
                        }
                        else if (author.literal) {
                            return author.literal;
                        }
                    });
                    authorStr = authorArr.join(' & ');
                }
                else if (ref.author.length > 2) {
                    if (ref.author[0].family) {
                        authorStr = `${ref.author[0].family} et al.`;
                    }
                    else if (ref.author[0].literal) {
                        authorStr = `${ref.author[0].literal} et al.`;
                    }
                }
                console.log({ year, authorStr });
                const intextCite = `(${authorStr}, ${year})`;
                replacement = replacement.replaceAll(pCite, intextCite);
            });
            console.log({ replacement });
            copy(replacement);
        });
        this.cites2Pandoc = () => __awaiter(this, void 0, void 0, function* () {
            const content = yield this.getSelectionText();
            console.log({ content });
            const refs = this.getCitationEntries();
            if (!refs) {
                return;
            }
            const cites = content.match(citeRegex);
            console.log({ cites });
            let replacements = content.slice();
            if (cites) {
                const citeMap = cites.map((cite) => {
                    const firstAuthor = cite.match(authorReg)[0];
                    const year = cite.match(/\d{4}/g)[0];
                    return { cite, firstAuthor, year };
                });
                console.log({ citeMap });
                // Replace cites with pandoc cites
                citeMap.forEach(cite => {
                    console.log({ cite });
                    const matchingRef = refs.find(ref => {
                        var _a;
                        return ((_a = ref.author) === null || _a === void 0 ? void 0 : _a.some(author => (author === null || author === void 0 ? void 0 : author.family) === cite.firstAuthor ||
                            (author === null || author === void 0 ? void 0 : author.literal) === cite.firstAuthor))
                            &&
                                ref.issued['date-parts'][0][0].toString() === cite.year;
                    });
                    if (matchingRef) {
                        const panCite = `[@${matchingRef.id}]`;
                        replacements = replacements.replaceAll(`(${cite.cite})`, panCite);
                    }
                });
                console.log(replacements);
            }
            // Latex â†’ Pandoc
            replacements = replacements.replaceAll(/\\cite\{(.+?)\}/g, '[@$1]');
            copy(replacements);
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin');
            yield this.loadSettings();
            this.addCommand({
                id: 'cites2Pandoc',
                name: 'Convert cites2Pandoc and copy to clipboard',
                callback: this.cites2Pandoc
            });
            this.addCommand({
                id: 'Pandoc2Cites',
                name: 'Convert Pandoc2Cites and copy to clipboard',
                callback: this.Pandoc2Cites
            });
            this.addSettingTab(new CSTSettingTab(this.app, this));
        });
    }
    getSelectionText() {
        return __awaiter(this, void 0, void 0, function* () {
            var text = "";
            if (window.getSelection) {
                text = window.getSelection().toString();
            }
            if (text !== '') {
                return text;
            }
            else {
                // Read current file
                const currFile = this.app.workspace.getActiveFile();
                return (yield this.app.vault.cachedRead(currFile));
            }
        });
    }
    getCitationEntries() {
        var _a, _b;
        let entries = (_b = (_a = this.app.plugins.plugins['obsidian-citation-plugin']) === null || _a === void 0 ? void 0 : _a.library) === null || _b === void 0 ? void 0 : _b.entries;
        if (!entries) {
            new obsidian.Notice('Please enable the Citations plugin');
            return;
        }
        let refs = Object.values(entries).map(entry => entry.data);
        return refs;
    }
    onunload() {
        console.log('unloading plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = CSTPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
